generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chat_message {
  id           Int            @id @default(autoincrement())
  chatroom_id  Int
  sender_id    Int
  message      String?        @db.MediumText
  file_url     String?        @db.VarChar(512)
  is_deleted   Boolean        @default(false)
  created_at   DateTime       @default(now()) @db.DateTime(0)
  chat_room    chat_room      @relation(fields: [chatroom_id], references: [id], onDelete: Cascade, map: "fk_cmsg_room")
  user         user           @relation(fields: [sender_id], references: [id], onDelete: Cascade, map: "fk_cmsg_sender")
  notification notification[]

  @@index([chatroom_id, created_at], map: "idx_cmsg_room_created")
  @@index([sender_id], map: "idx_cmsg_sender")
}

model chat_room {
  id             Int              @id @default(autoincrement())
  name           String?
  is_group       Boolean?
  created_at     DateTime         @default(now()) @db.DateTime(0)
  chat_message   chat_message[]
  chat_room_user chat_room_user[]
  notification   notification[]
}

model chat_room_user {
  id          Int       @id @default(autoincrement())
  chatroom_id Int
  user_id     Int
  left_at     DateTime? @db.DateTime(0)
  chat_room   chat_room @relation(fields: [chatroom_id], references: [id], onDelete: Cascade, map: "fk_croomuser_room")
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_croomuser_user")

  @@unique([chatroom_id, user_id], map: "uq_chatroom_user")
  @@index([user_id], map: "idx_croomuser_user")
}

model comment {
  id            Int            @id @default(autoincrement())
  post_id       Int
  user_id       Int
  content       String?        @db.MediumText
  parent_id     Int?
  is_anonymous  Boolean        @default(false)
  is_blinded    Boolean        @default(false)
  is_deleted    Boolean        @default(false)
  created_at    DateTime       @default(now()) @db.DateTime(0)
  updated_at    DateTime?      @db.DateTime(0)
  comment       comment?       @relation("commentTocomment", fields: [parent_id], references: [id], map: "fk_comment_parent")
  other_comment comment[]      @relation("commentTocomment")
  post          post           @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_comment_post")
  user          user           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_comment_user")
  comment_like  comment_like[]
  notification  notification[]

  @@index([parent_id], map: "idx_comment_parent")
  @@index([post_id, created_at], map: "idx_comment_post_created")
  @@index([user_id, created_at], map: "idx_comment_user_created")
}

model comment_like {
  id         Int      @id @default(autoincrement())
  comment_id Int
  user_id    Int
  created_at DateTime @default(now()) @db.DateTime(0)
  comment    comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade, map: "fk_commentlike_comment")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_commentlike_user")

  @@unique([comment_id, user_id], map: "unique_comment_like")
  @@index([user_id], map: "idx_commentlike_user")
}

model community {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "name")
  description String?  @db.VarChar(512)
  admin_id    Int?
  is_private  Boolean  @default(false)
  created_at  DateTime @default(now()) @db.DateTime(0)
  user        user?    @relation(fields: [admin_id], references: [id], map: "fk_community_admin")
  post        post[]

  @@index([admin_id], map: "fk_community_admin")
}

model emoji {
  id            Int             @id @default(autoincrement())
  name          String          @unique(map: "name")
  post_reaction post_reaction[]
}

model feed_cache {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  score      Float    @db.Float
  created_at DateTime @default(now()) @db.DateTime(0)
  post       post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_fc_post")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_fc_user")

  @@index([post_id], map: "idx_fc_post")
  @@index([user_id, score, created_at], map: "idx_fc_user_score_time")
}

model file_report {
  id          Int       @id @default(autoincrement())
  file_id     Int
  reporter_id Int
  reason      String?   @db.VarChar(512)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  post_file   post_file @relation(fields: [file_id], references: [id], onDelete: Cascade, map: "fk_freport_file")
  user        user      @relation(fields: [reporter_id], references: [id], onDelete: Cascade, map: "fk_freport_reporter")

  @@index([file_id], map: "idx_freport_file")
  @@index([reporter_id], map: "idx_freport_reporter")
}

model follow {
  follower_id                    Int
  following_id                   Int
  created_at                     DateTime @default(now()) @db.DateTime(0)
  user_follow_follower_idTouser  user     @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: Cascade, map: "fk_follow_follower")
  user_follow_following_idTouser user     @relation("follow_following_idTouser", fields: [following_id], references: [id], onDelete: Cascade, map: "fk_follow_following")

  @@id([follower_id, following_id])
  @@index([following_id], map: "idx_follow_following")
}

model notification {
  id                                     Int           @id @default(autoincrement())
  user_id                                Int
  type                                   String        @db.VarChar(100)
  message                                String?       @db.VarChar(512)
  is_read                                Boolean       @default(false)
  source_user_id                         Int?
  related_post_id                        Int?
  related_comment_id                     Int?
  chat_message_id                        Int?
  chat_room_id                           Int?
  created_at                             DateTime      @default(now()) @db.DateTime(0)
  chat_message                           chat_message? @relation(fields: [chat_message_id], references: [id], map: "fk_notif_chatmsg")
  chat_room                              chat_room?    @relation(fields: [chat_room_id], references: [id], map: "fk_notif_chatroom")
  comment                                comment?      @relation(fields: [related_comment_id], references: [id], map: "fk_notif_comment")
  post                                   post?         @relation(fields: [related_post_id], references: [id], map: "fk_notif_post")
  user_notification_source_user_idTouser user?         @relation("notification_source_user_idTouser", fields: [source_user_id], references: [id], map: "fk_notif_source_user")
  user_notification_user_idTouser        user          @relation("notification_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade, map: "fk_notif_user")

  @@index([chat_message_id], map: "idx_notif_chatmsg")
  @@index([chat_room_id], map: "idx_notif_chatroom")
  @@index([related_comment_id], map: "idx_notif_comment")
  @@index([related_post_id], map: "idx_notif_post")
  @@index([source_user_id], map: "idx_notif_source_user")
  @@index([user_id, is_read, created_at], map: "idx_notif_user_read_created")
}

model post {
  id            Int             @id @default(autoincrement())
  user_id       Int
  community_id  Int
  title         String?         @db.VarChar(255)
  content       String?         @db.MediumText
  is_anonymous  Boolean         @default(false)
  visibility    post_visibility @default(public)
  view_count    Int             @default(0)
  comment_count Int             @default(0)
  is_blinded    Boolean         @default(false)
  is_deleted    Boolean         @default(false)
  created_at    DateTime        @default(now()) @db.DateTime(0)
  updated_at    DateTime?       @db.DateTime(0)
  bookmark      bookmark[]
  comment       comment[]
  feed_cache    feed_cache[]
  notification  notification[]
  community     community       @relation(fields: [community_id], references: [id], onDelete: Cascade, map: "fk_post_community")
  user          user            @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_post_user")
  post_file     post_file[]
  post_like     post_like[]
  post_reaction post_reaction[]
  post_tag      post_tag[]
  repost        repost[]

  @@index([community_id, created_at], map: "idx_post_community_created")
  @@index([user_id, created_at], map: "idx_post_user_created")
}

model post_file {
  id           Int           @id @default(autoincrement())
  post_id      Int
  file_url     String?       @db.VarChar(512)
  file_type    String?       @db.VarChar(100)
  is_thumbnail Boolean       @default(false)
  uploaded_at  DateTime      @default(now()) @db.DateTime(0)
  file_report  file_report[]
  post         post          @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_postfile_post")

  @@index([post_id], map: "idx_postfile_post")
}

model post_like {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  created_at DateTime @default(now()) @db.DateTime(0)
  post       post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_postlike_post")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_postlike_user")

  @@unique([post_id, user_id], map: "unique_post_like")
  @@index([user_id], map: "idx_postlike_user")
}

model post_reaction {
  post_id    Int
  user_id    Int
  emoji_id   Int
  created_at DateTime @default(now()) @db.DateTime(0)
  emoji      emoji    @relation(fields: [emoji_id], references: [id], onDelete: Cascade, map: "fk_preaction_emoji")
  post       post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_preaction_post")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_preaction_user")

  @@id([post_id, user_id, emoji_id])
  @@index([emoji_id], map: "idx_preaction_emoji")
  @@index([user_id], map: "idx_preaction_user")
}

model post_tag {
  post_id Int
  tag_id  Int
  post    post @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_posttag_post")
  tag     tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade, map: "fk_posttag_tag")

  @@id([post_id, tag_id])
  @@index([tag_id], map: "idx_posttag_tag")
}

model profile_visit {
  id                                       Int      @id @default(autoincrement())
  visitor_id                               Int
  profile_user_id                          Int
  visited_at                               DateTime @default(now()) @db.DateTime(0)
  user_profile_visit_profile_user_idTouser user     @relation("profile_visit_profile_user_idTouser", fields: [profile_user_id], references: [id], onDelete: Cascade, map: "fk_pv_visited")
  user_profile_visit_visitor_idTouser      user     @relation("profile_visit_visitor_idTouser", fields: [visitor_id], references: [id], onDelete: Cascade, map: "fk_pv_visitor")

  @@index([visitor_id], map: "fk_pv_visitor")
  @@index([profile_user_id, visited_at], map: "idx_pv_profile_time")
}

model report {
  id          Int                @id @default(autoincrement())
  reporter_id Int
  target_type report_target_type
  target_id   Int
  reason      String?            @db.VarChar(512)
  created_at  DateTime           @default(now()) @db.DateTime(0)
  user        user               @relation(fields: [reporter_id], references: [id], onDelete: Cascade, map: "fk_report_reporter")

  @@index([reporter_id], map: "fk_report_reporter")
  @@index([target_type, target_id], map: "idx_report_target")
}

model search_history {
  id          Int      @id @default(autoincrement())
  user_id     Int
  keyword     String   @db.VarChar(255)
  searched_at DateTime @default(now()) @db.DateTime(0)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_sh_user")

  @@index([user_id, searched_at], map: "idx_sh_user_time")
}

model tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique(map: "name")
  post_tag post_tag[]
}

model user {
  id                                                Int                 @id @default(autoincrement())
  username                                          String              @unique(map: "username")
  password                                          String
  email                                             String              @unique(map: "email")
  name                                              String?
  nickname                                          String?             @unique(map: "nickname")
  profile_img                                       String?             @db.VarChar(512)
  bio                                               String?             @db.Text
  gender                                            String?             @db.VarChar(50)
  student_no                                        String?             @unique(map: "student_no") @db.VarChar(20)
  department                                        String?             @db.VarChar(100)
  university                                        String              @default("동서울대학교") @db.VarChar(100)
  email_verified                                    Boolean             @default(false)
  status                                            user_status         @default(active)
  website                                           String?             @db.VarChar(255)
  location                                          String?             @db.VarChar(255)
  birthday                                          DateTime?           @db.Date
  oauth_provider                                    String?             @db.VarChar(100)
  oauth_id                                          String?
  created_at                                        DateTime            @default(now()) @db.DateTime(0)
  bookmark                                          bookmark[]
  chat_message                                      chat_message[]
  chat_room_user                                    chat_room_user[]
  comment                                           comment[]
  comment_like                                      comment_like[]
  community                                         community[]
  emailverification                                 emailverification[]
  feed_cache                                        feed_cache[]
  file_report                                       file_report[]
  follow_follow_follower_idTouser                   follow[]            @relation("follow_follower_idTouser")
  follow_follow_following_idTouser                  follow[]            @relation("follow_following_idTouser")
  notification_notification_source_user_idTouser    notification[]      @relation("notification_source_user_idTouser")
  notification_notification_user_idTouser           notification[]      @relation("notification_user_idTouser")
  post                                              post[]
  post_like                                         post_like[]
  post_reaction                                     post_reaction[]
  profile_visit_profile_visit_profile_user_idTouser profile_visit[]     @relation("profile_visit_profile_user_idTouser")
  profile_visit_profile_visit_visitor_idTouser      profile_visit[]     @relation("profile_visit_visitor_idTouser")
  report                                            report[]
  repost                                            repost[]
  search_history                                    search_history[]
  user_block_user_block_blocked_user_idTouser       user_block[]        @relation("user_block_blocked_user_idTouser")
  user_block_user_block_user_idTouser               user_block[]        @relation("user_block_user_idTouser")
  user_oauth                                        user_oauth?
  user_profile                                      user_profile?
  user_security                                     user_security?
}

model user_block {
  id                                    Int      @id @default(autoincrement())
  user_id                               Int
  blocked_user_id                       Int
  created_at                            DateTime @default(now()) @db.DateTime(0)
  user_user_block_blocked_user_idTouser user     @relation("user_block_blocked_user_idTouser", fields: [blocked_user_id], references: [id], onDelete: Cascade, map: "fk_ub_blocked")
  user_user_block_user_idTouser         user     @relation("user_block_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade, map: "fk_ub_blocker")

  @@unique([user_id, blocked_user_id], map: "unique_block")
  @@index([blocked_user_id], map: "idx_ub_blocked")
}

model user_oauth {
  user_id        Int     @id
  oauth_provider String? @db.VarChar(100)
  oauth_id       String?
  user           user    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_oauth_user")
}

model user_profile {
  user_id     Int       @id
  name        String
  profile_img String?   @db.VarChar(512)
  bio         String?   @db.Text
  gender      String?   @db.VarChar(50)
  website     String?   @db.VarChar(255)
  location    String?   @db.VarChar(255)
  birthday    DateTime? @db.Date
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_profile_user")
}

model user_security {
  user_id        Int       @id
  email_verified Boolean   @default(false)
  last_login_at  DateTime? @db.DateTime(0)
  user           user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_security_user")
}

model bookmark {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime @default(now()) @db.DateTime(0)
  post       post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_bookmark_post")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_bookmark_user")

  @@unique([user_id, post_id], map: "uq_bookmark")
  @@index([post_id], map: "idx_bookmark_post")
  @@index([user_id], map: "idx_bookmark_user")
}

model repost {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  quote      String?  @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  post       post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "fk_repost_post")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_repost_user")

  @@unique([user_id, post_id], map: "uq_repost")
  @@index([post_id], map: "idx_repost_post")
  @@index([user_id], map: "idx_repost_user")
}

model emailverification {
  id         Int       @id @default(autoincrement())
  email      String    @db.VarChar(255)
  code       String    @db.VarChar(6)
  purpose    String    @db.VarChar(50)
  expiresAt  DateTime  @db.DateTime(0)
  consumedAt DateTime? @db.DateTime(0)
  userId     Int?
  user       user?     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_emailverif_user")

  @@index([userId], map: "fk_emailverif_user")
  @@index([email, purpose, expiresAt], map: "idx_emailverif_email_purpose_exp")
}

enum report_target_type {
  user
  post
  comment
  file
  chat_message
  community
}

enum post_visibility {
  public
  followers
  private
}

enum user_status {
  active
  inactive
  suspended
  deleted
}
