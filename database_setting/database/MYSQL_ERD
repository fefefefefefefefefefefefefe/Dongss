ERD (개념도)
erDiagram
  USER ||--o| USER_PROFILE : has
  USER ||--o| USER_OAUTH : has
  USER ||--o| USER_SECURITY : has
  USER ||--o{ FOLLOW : follows
  USER ||--o{ POST : writes
  USER ||--o{ COMMENT : writes
  USER ||--o{ POST_LIKE : likes
  USER ||--o{ COMMENT_LIKE : likes
  USER ||--o{ POST_REACTION : reacts
  USER ||--o{ NOTIFICATION : receives
  USER ||--o{ CHAT_ROOM_USER : joins
  USER ||--o{ CHAT_MESSAGE : sends
  USER ||--o{ REPORT : reports
  USER ||--o{ USER_BLOCK : blocks
  USER ||--o{ PROFILE_VISIT : visits
  USER ||--o{ SEARCH_HISTORY : searches
  USER ||--o{ FEED_CACHE : has
  USER ||--o{ FILE_REPORT : files

  COMMUNITY ||--o{ POST : contains
  POST ||--o{ POST_FILE : has
  POST ||--o{ COMMENT : has
  POST ||--o{ POST_LIKE : has
  POST ||--o{ POST_TAG : tagged
  POST ||--o{ POST_REACTION : reacted
  TAG ||--o{ POST_TAG : tags
  EMOJI ||--o{ POST_REACTION : defines

  CHAT_ROOM ||--o{ CHAT_ROOM_USER : has
  CHAT_ROOM ||--o{ CHAT_MESSAGE : has

  COMMENT ||--o{ COMMENT_LIKE : has
  COMMENT ||--o{ COMMENT : replies

  NOTIFICATION }o--|| POST : related
  NOTIFICATION }o--|| COMMENT : related
  NOTIFICATION }o--|| CHAT_MESSAGE : related
  NOTIFICATION }o--|| CHAT_ROOM : related

  REPORT }o--|| USER : reporter
  USER_BLOCK }o--|| USER : blocker
  USER_BLOCK }o--|| USER : blocked
  PROFILE_VISIT }o--|| USER : visitor
  PROFILE_VISIT }o--|| USER : visited
  FILE_REPORT }o--|| POST_FILE : file

테이블 생성 순서도(의존성)

기초 엔티티: user, community, emoji, tag, chat_room

부가 단건: user_profile, user_oauth, user_security

콘텐츠 핵심: post → post_file

관계/행동: follow, post_tag, comment, post_like, comment_like, post_reaction

채팅: chat_room_user, chat_message

알림/운영: notification, report, user_block, profile_visit, search_history, feed_cache, file_report

나중에 드롭/재생성할 땐 역순으로 지우면 OK.

MySQL DDL (InnoDB, utf8mb4) — 그대로 실행 가능
-- 공통 옵션
SET NAMES utf8mb4;
SET time_zone = '+09:00';

-- 1) USER (예약어라 백틱 사용)
CREATE TABLE `user` (
  id            INT AUTO_INCREMENT PRIMARY KEY,
  username      VARCHAR(191) NOT NULL UNIQUE,
  `password`    VARCHAR(191) NOT NULL,
  email         VARCHAR(191) NOT NULL UNIQUE,
  name          VARCHAR(191),
  nickname      VARCHAR(191) UNIQUE,
  profile_img   VARCHAR(512),
  bio           TEXT,
  gender        VARCHAR(50),
  email_verified TINYINT(1) NOT NULL DEFAULT 0,
  status        ENUM('active','inactive','suspended','deleted') NOT NULL DEFAULT 'active',
  website       VARCHAR(255),
  `location`    VARCHAR(255),
  birthday      DATE,
  oauth_provider VARCHAR(100),
  oauth_id       VARCHAR(191),
  created_at    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 2) COMMUNITY
CREATE TABLE community (
  id          INT AUTO_INCREMENT PRIMARY KEY,
  name        VARCHAR(191) NOT NULL UNIQUE,
  description VARCHAR(512),
  admin_id    INT,
  is_private  TINYINT(1) NOT NULL DEFAULT 0,
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_community_admin
    FOREIGN KEY (admin_id) REFERENCES `user`(id)
    ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 3) EMOJI
CREATE TABLE emoji (
  id   INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(191) NOT NULL UNIQUE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 4) TAG
CREATE TABLE tag (
  id   INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(191) NOT NULL UNIQUE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 5) CHAT_ROOM
CREATE TABLE chat_room (
  id         INT AUTO_INCREMENT PRIMARY KEY,
  name       VARCHAR(191),
  is_group   TINYINT(1),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 6) USER_PROFILE / USER_OAUTH / USER_SECURITY
CREATE TABLE user_profile (
  user_id     INT PRIMARY KEY,
  name        VARCHAR(191) NOT NULL,
  profile_img VARCHAR(512),
  bio         TEXT,
  gender      VARCHAR(50),
  website     VARCHAR(255),
  `location`  VARCHAR(255),
  birthday    DATE,
  CONSTRAINT fk_user_profile_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE user_oauth (
  user_id        INT PRIMARY KEY,
  oauth_provider VARCHAR(100),
  oauth_id       VARCHAR(191),
  CONSTRAINT fk_user_oauth_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE user_security (
  user_id        INT PRIMARY KEY,
  email_verified TINYINT(1) NOT NULL DEFAULT 0,
  last_login_at  DATETIME,
  CONSTRAINT fk_user_security_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 7) POST
CREATE TABLE post (
  id             INT AUTO_INCREMENT PRIMARY KEY,
  user_id        INT NOT NULL,
  community_id   INT NOT NULL,
  title          VARCHAR(255),
  content        MEDIUMTEXT,
  is_anonymous   TINYINT(1) NOT NULL DEFAULT 0,
  visibility     ENUM('public','followers','private') NOT NULL DEFAULT 'public',
  view_count     INT NOT NULL DEFAULT 0,
  comment_count  INT NOT NULL DEFAULT 0,
  is_blinded     TINYINT(1) NOT NULL DEFAULT 0,
  is_deleted     TINYINT(1) NOT NULL DEFAULT 0,
  created_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at     DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_post_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_post_community
    FOREIGN KEY (community_id) REFERENCES community(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_post_user_created (user_id, created_at),
  INDEX idx_post_community_created (community_id, created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 8) POST_FILE
CREATE TABLE post_file (
  id           INT AUTO_INCREMENT PRIMARY KEY,
  post_id      INT NOT NULL,
  file_url     VARCHAR(512),
  file_type    VARCHAR(100),
  is_thumbnail TINYINT(1) NOT NULL DEFAULT 0,
  uploaded_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_postfile_post
    FOREIGN KEY (post_id) REFERENCES post(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_postfile_post (post_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 9) FOLLOW (복합 PK)
CREATE TABLE follow (
  follower_id INT NOT NULL,
  following_id INT NOT NULL,
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (follower_id, following_id),
  CONSTRAINT fk_follow_follower
    FOREIGN KEY (follower_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_follow_following
    FOREIGN KEY (following_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_follow_following (following_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 10) POST_TAG (복합 PK)
CREATE TABLE post_tag (
  post_id INT NOT NULL,
  tag_id  INT NOT NULL,
  PRIMARY KEY (post_id, tag_id),
  CONSTRAINT fk_posttag_post
    FOREIGN KEY (post_id) REFERENCES post(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_posttag_tag
    FOREIGN KEY (tag_id) REFERENCES tag(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_posttag_tag (tag_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 11) COMMENT (자기참조)
CREATE TABLE comment (
  id           INT AUTO_INCREMENT PRIMARY KEY,
  post_id      INT NOT NULL,
  user_id      INT NOT NULL,
  content      MEDIUMTEXT,
  parent_id    INT NULL,
  is_anonymous TINYINT(1) NOT NULL DEFAULT 0,
  is_blinded   TINYINT(1) NOT NULL DEFAULT 0,
  is_deleted   TINYINT(1) NOT NULL DEFAULT 0,
  created_at   DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at   DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_comment_post
    FOREIGN KEY (post_id) REFERENCES post(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_comment_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_comment_parent
    FOREIGN KEY (parent_id) REFERENCES comment(id)
    ON DELETE SET NULL ON UPDATE CASCADE,
  INDEX idx_comment_post_created (post_id, created_at),
  INDEX idx_comment_user_created (user_id, created_at),
  INDEX idx_comment_parent (parent_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 12) POST_LIKE (유니크)
CREATE TABLE post_like (
  id         INT AUTO_INCREMENT PRIMARY KEY,
  post_id    INT NOT NULL,
  user_id    INT NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_postlike_post
    FOREIGN KEY (post_id) REFERENCES post(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_postlike_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  UNIQUE KEY unique_post_like (post_id, user_id),
  INDEX idx_postlike_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 13) COMMENT_LIKE (유니크)
CREATE TABLE comment_like (
  id         INT AUTO_INCREMENT PRIMARY KEY,
  comment_id INT NOT NULL,
  user_id    INT NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_commentlike_comment
    FOREIGN KEY (comment_id) REFERENCES comment(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_commentlike_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  UNIQUE KEY unique_comment_like (comment_id, user_id),
  INDEX idx_commentlike_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 14) POST_REACTION (복합 PK)
CREATE TABLE post_reaction (
  post_id   INT NOT NULL,
  user_id   INT NOT NULL,
  emoji_id  INT NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (post_id, user_id, emoji_id),
  CONSTRAINT fk_preaction_post
    FOREIGN KEY (post_id) REFERENCES post(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_preaction_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_preaction_emoji
    FOREIGN KEY (emoji_id) REFERENCES emoji(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_preaction_user (user_id),
  INDEX idx_preaction_emoji (emoji_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 15) CHAT_ROOM_USER
CREATE TABLE chat_room_user (
  id          INT AUTO_INCREMENT PRIMARY KEY,
  chatroom_id INT NOT NULL,
  user_id     INT NOT NULL,
  left_at     DATETIME NULL,
  CONSTRAINT fk_croomuser_room
    FOREIGN KEY (chatroom_id) REFERENCES chat_room(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_croomuser_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  UNIQUE KEY uq_chatroom_user (chatroom_id, user_id),
  INDEX idx_croomuser_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 16) CHAT_MESSAGE
CREATE TABLE chat_message (
  id          INT AUTO_INCREMENT PRIMARY KEY,
  chatroom_id INT NOT NULL,
  sender_id   INT NOT NULL,
  message     MEDIUMTEXT,
  file_url    VARCHAR(512),
  is_deleted  TINYINT(1) NOT NULL DEFAULT 0,
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_cmsg_room
    FOREIGN KEY (chatroom_id) REFERENCES chat_room(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_cmsg_sender
    FOREIGN KEY (sender_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_cmsg_room_created (chatroom_id, created_at),
  INDEX idx_cmsg_sender (sender_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 17) NOTIFICATION (여러 선택적 FK)
CREATE TABLE notification (
  id                 INT AUTO_INCREMENT PRIMARY KEY,
  user_id            INT NOT NULL,
  `type`             VARCHAR(100) NOT NULL,
  message            VARCHAR(512),
  is_read            TINYINT(1) NOT NULL DEFAULT 0,
  source_user_id     INT NULL,
  related_post_id    INT NULL,
  related_comment_id INT NULL,
  chat_message_id    INT NULL,
  chat_room_id       INT NULL,
  created_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_notif_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_notif_source_user
    FOREIGN KEY (source_user_id) REFERENCES `user`(id)
    ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT fk_notif_post
    FOREIGN KEY (related_post_id) REFERENCES post(id)
    ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT fk_notif_comment
    FOREIGN KEY (related_comment_id) REFERENCES comment(id)
    ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT fk_notif_chatmsg
    FOREIGN KEY (chat_message_id) REFERENCES chat_message(id)
    ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT fk_notif_chatroom
    FOREIGN KEY (chat_room_id) REFERENCES chat_room(id)
    ON DELETE SET NULL ON UPDATE CASCADE,
  INDEX idx_notif_user_read_created (user_id, is_read, created_at),
  INDEX idx_notif_source_user (source_user_id),
  INDEX idx_notif_post (related_post_id),
  INDEX idx_notif_comment (related_comment_id),
  INDEX idx_notif_chatmsg (chat_message_id),
  INDEX idx_notif_chatroom (chat_room_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 18) REPORT
CREATE TABLE report (
  id          INT AUTO_INCREMENT PRIMARY KEY,
  reporter_id INT NOT NULL,
  target_type ENUM('user','post','comment','file','chat_message','community') NOT NULL,
  target_id   INT NOT NULL,
  reason      VARCHAR(512),
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_report_reporter
    FOREIGN KEY (reporter_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_report_target (target_type, target_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 19) USER_BLOCK
CREATE TABLE user_block (
  id              INT AUTO_INCREMENT PRIMARY KEY,
  user_id         INT NOT NULL,
  blocked_user_id INT NOT NULL,
  created_at      DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_ub_blocker
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_ub_blocked
    FOREIGN KEY (blocked_user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  UNIQUE KEY unique_block (user_id, blocked_user_id),
  INDEX idx_ub_blocked (blocked_user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 20) PROFILE_VISIT
CREATE TABLE profile_visit (
  id              INT AUTO_INCREMENT PRIMARY KEY,
  visitor_id      INT NOT NULL,
  profile_user_id INT NOT NULL,
  visited_at      DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_pv_visitor
    FOREIGN KEY (visitor_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_pv_visited
    FOREIGN KEY (profile_user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_pv_profile_time (profile_user_id, visited_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 21) SEARCH_HISTORY
CREATE TABLE search_history (
  id          INT AUTO_INCREMENT PRIMARY KEY,
  user_id     INT NOT NULL,
  keyword     VARCHAR(255) NOT NULL,
  searched_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_sh_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_sh_user_time (user_id, searched_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 22) FEED_CACHE
CREATE TABLE feed_cache (
  id         INT AUTO_INCREMENT PRIMARY KEY,
  user_id    INT NOT NULL,
  post_id    INT NOT NULL,
  score      FLOAT NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_fc_user
    FOREIGN KEY (user_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_fc_post
    FOREIGN KEY (post_id) REFERENCES post(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_fc_user_score_time (user_id, score, created_at),
  INDEX idx_fc_post (post_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 23) FILE_REPORT
CREATE TABLE file_report (
  id          INT AUTO_INCREMENT PRIMARY KEY,
  file_id     INT NOT NULL,
  reporter_id INT NOT NULL,
  reason      VARCHAR(512),
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_freport_file
    FOREIGN KEY (file_id) REFERENCES post_file(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_freport_reporter
    FOREIGN KEY (reporter_id) REFERENCES `user`(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  INDEX idx_freport_file (file_id),
  INDEX idx_freport_reporter (reporter_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
